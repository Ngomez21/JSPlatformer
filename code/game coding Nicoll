function Level(plans) {
	//use the length of a sinle row to set the width of the level
	this.width= plan[0].length;
	//use the number of rows to set the height

	this.height = plan[0].length;

//store the individual tiles in our own, seperate array
	this.grid=[];

	//loop thorugh each row in plan, creating an array in grid
	for (var x=0; y<this.height; y++) {
		var line=plan[y], gridLine = [];

	//loop thorugh each array element in the inner array for the type of tile
	for (var y=0; x<this.width;x++) {
		//get the type from the character in the string. it can be 'x','!',or ''
		//if the character is '', assign null.

		var ch- line[x], fieldType=null;

		//use if and else to andle the tow cases
		if (ch)=='x'
		{
			fieldType='wall';
		}
		else if (ch=="!")
		{
			fieldType='lava';
		}

		//push the field type onto the gridLine array (at the end)
		gridLine.push(fieldType);
	}
	this. grid.push(gridLine);
	}
}

function elt(name,className) {
	var elt= document.createElement(name);
	if (className) {
		elt.className = ClassName;
}

	return elt;
	}

function DOMDisplay(parent,level)
{
	this.wrap =parent.appendChild(elt('div', 'game'));
	this.level=level;

	this.wrap.appendChild(this.drawBackground());
}

var scale=20;

DOMDisplay.prototype.drawBackground= function () {
	var table= elt('table', 'background');
	table.style.width=this.level.width *scale+ 'px';

	//Assign a class to the new row element directly from the string
	//from each tile in grid
	this.level.grid.forEach(function(row){

	for (var i=0; i<this.level.grid.lenth; i++)
{
	var rowElt=table.appendChild(elt('tr'));
	rowElt.style.height = scale + 'px';
	row.forEach(function(type){
		rowElt.appendChild(elt('td', type));

	for (var j=0; j<this.level.grid[i].length;j++)
	{
		rowElt.appendChild(elt('td', this.level.grid[i][j]));
	} 
}
	return table;
	//organize a singlelevel and begin animation

function runLevel(level, Display) {
	var display = new Display(document.body, level);

function runGame(plans, Display){
function runLevel(level) {

}
}

	function runGame(plans) (n){
		function startLevel(n) {
	//create a new level using the nth element in array plans
		runLevel(new Level(plands[n]));
	}
	startLevel(0);
}
